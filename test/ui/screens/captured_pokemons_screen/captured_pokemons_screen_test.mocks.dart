// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_pokedex/test/ui/screens/captured_pokemons_screen/captured_pokemons_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:flutter_pokedex/application/bloc/captured_pokemons_screen/captured_pokemons_screen_bloc.dart'
    as _i2;
import 'package:flutter_pokedex/application/bloc/custom_bottom_navigation/custom_bottom_navigation_bloc.dart'
    as _i3;
import 'package:flutter_pokedex/application/bloc/user_information/user_information_bloc.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCapturedPokemonsScreenState_0 extends _i1.SmartFake
    implements _i2.CapturedPokemonsScreenState {
  _FakeCapturedPokemonsScreenState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCustomBottomNavigationState_1 extends _i1.SmartFake
    implements _i3.CustomBottomNavigationState {
  _FakeCustomBottomNavigationState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserInformationState_2 extends _i1.SmartFake
    implements _i4.UserInformationState {
  _FakeUserInformationState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CapturedPokemonsScreenBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCapturedPokemonsScreenBloc extends _i1.Mock
    implements _i2.CapturedPokemonsScreenBloc {
  MockCapturedPokemonsScreenBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CapturedPokemonsScreenState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCapturedPokemonsScreenState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.CapturedPokemonsScreenState);

  @override
  _i5.Stream<_i2.CapturedPokemonsScreenState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.CapturedPokemonsScreenState>.empty(),
      ) as _i5.Stream<_i2.CapturedPokemonsScreenState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i2.CapturedPokemonsScreenEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i2.CapturedPokemonsScreenEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.CapturedPokemonsScreenState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i2.CapturedPokemonsScreenEvent>(
    _i6.EventHandler<E, _i2.CapturedPokemonsScreenState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i6.Transition<_i2.CapturedPokemonsScreenEvent,
                  _i2.CapturedPokemonsScreenState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i6.Change<_i2.CapturedPokemonsScreenState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CustomBottomNavigationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomBottomNavigationBloc extends _i1.Mock
    implements _i3.CustomBottomNavigationBloc {
  MockCustomBottomNavigationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CustomBottomNavigationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCustomBottomNavigationState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.CustomBottomNavigationState);

  @override
  _i5.Stream<_i3.CustomBottomNavigationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.CustomBottomNavigationState>.empty(),
      ) as _i5.Stream<_i3.CustomBottomNavigationState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i3.CustomBottomNavigationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i3.CustomBottomNavigationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.CustomBottomNavigationState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i3.CustomBottomNavigationEvent>(
    _i6.EventHandler<E, _i3.CustomBottomNavigationState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i6.Transition<_i3.CustomBottomNavigationEvent,
                  _i3.CustomBottomNavigationState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i6.Change<_i3.CustomBottomNavigationState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserInformationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInformationBloc extends _i1.Mock
    implements _i4.UserInformationBloc {
  MockUserInformationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UserInformationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeUserInformationState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.UserInformationState);

  @override
  _i5.Stream<_i4.UserInformationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i4.UserInformationState>.empty(),
      ) as _i5.Stream<_i4.UserInformationState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i4.UserInformationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i4.UserInformationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i4.UserInformationState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i4.UserInformationEvent>(
    _i6.EventHandler<E, _i4.UserInformationState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i6.Transition<_i4.UserInformationEvent, _i4.UserInformationState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i6.Change<_i4.UserInformationState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
